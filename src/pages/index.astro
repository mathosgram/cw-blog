---
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import LinkButton from "@/components/LinkButton.astro";
import Card from "@/components/Card.astro";
import Hr from "@/components/Hr.astro";
import getSortedPosts from "@/utils/getSortedPosts";
import IconRss from "@/assets/icons/IconRss.svg";
import IconArrowRight from "@/assets/icons/IconArrowRight.svg";

// Get static posts from content collection
const posts = await getCollection("blog");
const sortedPosts = getSortedPosts(posts);
const featuredPosts = sortedPosts.filter(({ data }) => data.featured);
const recentPosts = sortedPosts.filter(({ data }) => !data.featured);
---

<Layout>
  <Header />
  <main id="main-content">
    <section id="hero">
      <h1 class="mr-2 text-4xl font-bold">
        Welcome to <span style="color: var(--color-accent);">Stack</span>
      </h1>
      <a
        target="_blank"
        href="/rss.xml"
        class="rss-link"
        aria-label="rss feed"
        title="RSS Feed"
      >
        <IconRss class="inline-block size-6 fill-current" />
      </a>

      <p>
        Stack is the official writing platform for the Cowrywise Ambassador Writing Group. 
        Here, our ambassadors share insights on personal finance, investment strategies, 
        and financial literacy to help Nigerians build wealth and achieve financial freedom.
      </p>
      <p class="mt-2">
        Join our community of financial writers and discover stories that inspire smart money decisions.
        Together, we're building a financially literate Nigeria, one story at a time.
      </p>

    </section>

    <Hr />

    <!-- Dynamic Posts Section -->
    <div id="dynamic-posts-section" class="w-full max-w-none overflow-hidden">
      <!-- This will be populated by JavaScript -->
    </div>

    <!-- Featured Posts -->
    {
      featuredPosts.length > 0 && (
        <>
          <section id="featured" class="pt-12 pb-6">
            <h2 class="text-2xl font-semibold tracking-wide">Featured</h2>
            <ul>
              {featuredPosts.map(data => (
                <Card variant="h3" {...data} />
              ))}
            </ul>
          </section>
          {recentPosts.length > 0 && <Hr />}
        </>
      )
    }

    <!-- Recent Posts -->
    {
      recentPosts.length > 0 && (
        <section id="recent-posts" class="pb-6 pt-12">
          <h2 class="text-2xl font-semibold tracking-wide">Recent Posts</h2>
          <ul>
            {recentPosts.map(data => (
              <Card variant="h3" {...data} />
            ))}
          </ul>
        </section>
      )
    }

    <div class="all-posts-btn-wrapper">
      <LinkButton href="/posts/">
        All Posts
        <IconArrowRight class="inline-block size-4 fill-current" />
      </LinkButton>
    </div>
  </main>

  <Footer />
</Layout>

<style>
  #hero {
    padding-bottom: 1.5rem;
    padding-top: 2rem;
  }
  #hero h1 {
    margin: 1rem 0;
    display: inline-block;
    font-size: 1.875rem;
    font-weight: 700;
  }
  @media (min-width: 640px) {
    #hero h1 {
      margin: 2rem 0;
      font-size: 3rem;
    }
  }
  #hero .rss-link {
    margin-bottom: 1.5rem;
  }
  #hero .rss-link svg {
    margin-bottom: 0.5rem;
    display: inline-block;
    width: 1.5rem;
    height: 1.5rem;
    transform: scale(1.1);
    fill: color-mix(in srgb, var(--color-accent) 75%, transparent);
    transition: all 0.3s;
  }
  #hero .rss-link svg:hover {
    fill: var(--color-accent);
  }
  @media (min-width: 640px) {
    #hero .rss-link svg {
      margin-bottom: 0.75rem;
      transform: scale(1.25);
    }
  }
  #hero p {
    margin: 0.5rem 0;
  }
  #featured,
  #recent-posts {
    padding-bottom: 1.5rem;
    padding-top: 3rem;
  }
  #featured h2,
  #recent-posts h2 {
    font-size: 1.5rem;
    font-weight: 600;
    letter-spacing: 0.025em;
  }
  .all-posts-btn-wrapper {
    margin: 2rem 0;
    text-align: center;
  }
  
  /* Dynamic posts styling */
  #dynamic-posts-section {
    transition: opacity 0.3s ease;
  }
  
  #dynamic-posts-section h2 {
    font-size: 1.5rem;
    font-weight: 600;
    letter-spacing: 0.025em;
  }
  
  #dynamic-posts-section ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  #dynamic-posts-section li {
    margin: 1.5rem 0;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }
  
  #dynamic-posts-section a {
    display: block;
    max-width: 100%;
    overflow: hidden;
  }

</style>

<script>
  // Display dynamic posts from localStorage
  function displayDynamicPosts() {
    const posts = localStorage.getItem('blog_posts');
    if (!posts) return;

    const blogPosts = JSON.parse(posts);
    const publishedPosts = blogPosts.filter((post: any) => post.published);
    
    if (publishedPosts.length === 0) return;

    const container = document.getElementById('dynamic-posts-section');
    if (!container) return;

    // Sort posts by creation date (newest first)
    publishedPosts.sort((a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
    
    // Get featured and recent posts
    const featuredPosts = publishedPosts.filter((post: any) => post.featured);
    const recentPosts = publishedPosts.filter((post: any) => !post.featured);

    function createPostCard(post: any) {
      const slug = post.title.toLowerCase().replace(/[^a-z0-9]+/g, '-');
      const formattedDate = new Date(post.createdAt).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
      
      return `
        <li class="my-6">
          <a href="#" onclick="viewDynamicPost('${post.id}')" class="block text-lg font-medium text-accent decoration-dashed underline-offset-4 focus-visible:no-underline focus-visible:underline-offset-0 cursor-pointer">
            <h3 class="text-lg font-medium decoration-dashed hover:underline break-words" style="view-transition-name: ${slug}">${post.title}</h3>
          </a>
          <div class="text-sm opacity-75 mt-1">
            <time>${formattedDate}</time> • by ${post.author}
            ${post.featured ? ' • <span class="text-accent font-medium">Featured</span>' : ''}
          </div>
          <p class="mt-2 text-foreground/80 break-words leading-relaxed">${post.description}</p>
          ${post.tags && post.tags.length > 0 ? `
            <div class="mt-3 flex flex-wrap gap-1">
              ${post.tags.map((tag: any) => `<span class="text-xs px-2 py-1 bg-accent/10 text-accent rounded-full break-words">#${tag}</span>`).join('')}
            </div>
          ` : ''}
        </li>
      `;
    }

    let html = '';

    // Add featured posts (matching static layout exactly)
    if (featuredPosts.length > 0) {
      html += `
        <section id="dynamic-featured" class="pt-12 pb-6">
          <h2 class="text-2xl font-semibold tracking-wide">Featured</h2>
          <ul>
            ${featuredPosts.slice(0, 3).map(createPostCard).join('')}
          </ul>
        </section>
      `;
    }

    // Add recent posts (matching static layout exactly)
    if (recentPosts.length > 0) {
      if (featuredPosts.length > 0) {
        html += '<hr class="border-border my-8">';
      }
      
      html += `
        <section id="dynamic-recent" class="pt-12 pb-6">
          <h2 class="text-2xl font-semibold tracking-wide">Recent Posts</h2>
          <ul>
            ${recentPosts.slice(0, 5).map(createPostCard).join('')}
          </ul>
        </section>
      `;
    }

    if (html) {
      // Smoothly update the container
      container.style.opacity = '0';
      container.style.transition = 'opacity 0.3s ease';
      
      setTimeout(() => {
        container.innerHTML = html;
        container.style.opacity = '1';
        
        // Add HR after dynamic posts if there are static posts
        const staticSections = document.querySelector('#featured, #recent-posts');
        if (staticSections) {
          container.innerHTML += '<hr class="border-border my-8">';
        }
      }, 150);
    } else {
      // Hide container smoothly if no posts
      container.style.opacity = '0';
      setTimeout(() => {
        container.innerHTML = '';
        container.style.opacity = '1';
      }, 150);
    }
  }

  // Load posts when page loads
  document.addEventListener('DOMContentLoaded', displayDynamicPosts);
  
  // Listen for storage changes (when posts are added/updated in admin panel)
  window.addEventListener('storage', function(e) {
    if (e.key === 'blog_posts') {
      displayDynamicPosts();
    }
  });
  
  // Listen for custom refresh events (for same-tab updates)
  window.addEventListener('refreshPosts', function() {
    displayDynamicPosts();
  });
  
  // Also check for posts every 2 seconds (fallback)
  setInterval(displayDynamicPosts, 2000);
  
  // Function to view dynamic post content
  function viewDynamicPost(postId: string) {
    const posts = localStorage.getItem('blog_posts');
    if (!posts) return;
    
    const blogPosts = JSON.parse(posts);
    const post = blogPosts.find((p: any) => p.id === postId);
    
    if (!post) return;
    
    // Create modal to display post
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4';
    modal.onclick = (e) => {
      if (e.target === modal) {
        document.body.removeChild(modal);
      }
    };
    
    const content = document.createElement('div');
    content.className = 'bg-background border border-border rounded-lg p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto';
    
    const formattedDate = new Date(post.createdAt).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
    content.innerHTML = `
      <div class="flex justify-between items-start mb-4">
        <div>
          <h1 class="text-2xl font-bold text-foreground mb-2">${post.title}</h1>
          <div class="text-sm text-foreground/70 mb-4">
            ${formattedDate} • by ${post.author}
            ${post.featured ? ' • <span class="text-accent font-medium">Featured</span>' : ''}
          </div>
          <p class="text-foreground/80 mb-4">${post.description}</p>
        </div>
        <button onclick="this.closest('.fixed').remove()" class="text-foreground/60 hover:text-foreground text-xl">&times;</button>
      </div>
      <div class="prose prose-sm max-w-none text-foreground">
        ${post.content.replace(/\n/g, '<br>')}
      </div>
      ${post.tags && post.tags.length > 0 ? `
        <div class="mt-6 flex flex-wrap gap-2">
          ${post.tags.map((tag: string) => `<span class="text-xs px-2 py-1 bg-accent/10 text-accent rounded-full">#${tag}</span>`).join('')}
        </div>
      ` : ''}
    `;
    
    modal.appendChild(content);
    document.body.appendChild(modal);
  }
  
  // Make function globally available
  (window as any).viewDynamicPost = viewDynamicPost;
</script>
