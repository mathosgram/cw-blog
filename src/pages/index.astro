---
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import LinkButton from "@/components/LinkButton.astro";
import Card from "@/components/Card.astro";
import Hr from "@/components/Hr.astro";
import getSortedPosts from "@/utils/getSortedPosts";
import IconRss from "@/assets/icons/IconRss.svg";
import IconArrowRight from "@/assets/icons/IconArrowRight.svg";

// Get static posts from content collection
const posts = await getCollection("blog");
const sortedPosts = getSortedPosts(posts);
const featuredPosts = sortedPosts.filter(({ data }) => data.featured);
const recentPosts = sortedPosts.filter(({ data }) => !data.featured);
---

<Layout>
  <Header />
  <main id="main-content">
    <section id="hero">
      <h1 class="mr-2 text-4xl font-bold">
        Welcome to <span style="color: var(--color-accent);">Stack</span>
      </h1>
      <a
        target="_blank"
        href="/rss.xml"
        class="rss-link"
        aria-label="rss feed"
        title="RSS Feed"
      >
        <IconRss class="inline-block size-6 fill-current" />
      </a>

      <p>
        Stack is the official writing platform for the Cowrywise Ambassador Writing Group. 
        Here, our ambassadors share insights on personal finance, investment strategies, 
        and financial literacy to help Nigerians build wealth and achieve financial freedom.
      </p>
      <p class="mt-2">
        Join our community of financial writers and discover stories that inspire smart money decisions.
        Together, we're building a financially literate Nigeria, one story at a time.
      </p>

    </section>

    <Hr />

    <!-- Dynamic Posts Section -->
    <div id="dynamic-posts-section">
      <!-- This will be populated by JavaScript -->
    </div>

    <!-- Featured Posts -->
    {
      featuredPosts.length > 0 && (
        <>
          <section id="featured" class="pt-12 pb-6">
            <h2 class="text-2xl font-semibold tracking-wide">Featured</h2>
            <ul>
              {featuredPosts.map(data => (
                <Card variant="h3" {...data} />
              ))}
            </ul>
          </section>
          {recentPosts.length > 0 && <Hr />}
        </>
      )
    }

    <!-- Recent Posts -->
    {
      recentPosts.length > 0 && (
        <section id="recent-posts" class="pb-6 pt-12">
          <h2 class="text-2xl font-semibold tracking-wide">Recent Posts</h2>
          <ul>
            {recentPosts.map(data => (
              <Card variant="h3" {...data} />
            ))}
          </ul>
        </section>
      )
    }

    <div class="all-posts-btn-wrapper">
      <LinkButton href="/posts/">
        All Posts
        <IconArrowRight class="inline-block size-4 fill-current" />
      </LinkButton>
    </div>
  </main>

  <Footer />
</Layout>

<style>
  #hero {
    padding-bottom: 1.5rem;
    padding-top: 2rem;
  }
  #hero h1 {
    margin: 1rem 0;
    display: inline-block;
    font-size: 1.875rem;
    font-weight: 700;
  }
  @media (min-width: 640px) {
    #hero h1 {
      margin: 2rem 0;
      font-size: 3rem;
    }
  }
  #hero .rss-link {
    margin-bottom: 1.5rem;
  }
  #hero .rss-link svg {
    margin-bottom: 0.5rem;
    display: inline-block;
    width: 1.5rem;
    height: 1.5rem;
    transform: scale(1.1);
    fill: color-mix(in srgb, var(--color-accent) 75%, transparent);
    transition: all 0.3s;
  }
  #hero .rss-link svg:hover {
    fill: var(--color-accent);
  }
  @media (min-width: 640px) {
    #hero .rss-link svg {
      margin-bottom: 0.75rem;
      transform: scale(1.25);
    }
  }
  #hero p {
    margin: 0.5rem 0;
  }
  #featured,
  #recent-posts {
    padding-bottom: 1.5rem;
    padding-top: 3rem;
  }
  #featured h2,
  #recent-posts h2 {
    font-size: 1.5rem;
    font-weight: 600;
    letter-spacing: 0.025em;
  }
  .all-posts-btn-wrapper {
    margin: 2rem 0;
    text-align: center;
  }
  .dynamic-post-card {
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    padding: 1.5rem;
    margin-bottom: 1rem;
    background: var(--color-background);
    transition: box-shadow 0.3s;
  }
  .dynamic-post-card:hover {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }
  .dynamic-post-title {
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--color-accent);
  }
  .dynamic-post-meta {
    font-size: 0.875rem;
    color: color-mix(in srgb, var(--color-foreground) 60%, transparent);
    margin-bottom: 0.75rem;
  }
  .dynamic-post-description {
    color: color-mix(in srgb, var(--color-foreground) 80%, transparent);
    margin-bottom: 0.75rem;
  }
  .dynamic-post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }
  .dynamic-post-tag {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
    background: var(--color-muted);
    color: color-mix(in srgb, var(--color-foreground) 70%, transparent);
  }
  .dynamic-post-featured {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    background: color-mix(in srgb, var(--color-accent) 10%, transparent);
    color: var(--color-accent);
    margin-left: 0.5rem;
  }
</style>

<script>
  // Display dynamic posts from localStorage
  function displayDynamicPosts() {
    const posts = localStorage.getItem('blog_posts');
    if (!posts) return;

    const blogPosts = JSON.parse(posts);
    const publishedPosts = blogPosts.filter((post: any) => post.published);
    
    if (publishedPosts.length === 0) return;

    const container = document.getElementById('dynamic-posts-section');
    if (!container) return;

    // Sort posts by creation date (newest first)
    publishedPosts.sort((a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
    
    // Get featured and recent posts
    const featuredPosts = publishedPosts.filter((post: any) => post.featured);
    const recentPosts = publishedPosts.filter((post: any) => !post.featured);

    let html = '';

    // Add featured posts
    if (featuredPosts.length > 0) {
      html += `
        <section class="pt-12 pb-6">
          <h2 class="text-2xl font-semibold tracking-wide">Latest Featured</h2>
          <div class="space-y-4">
            ${featuredPosts.slice(0, 3).map((post: any) => `
              <article class="dynamic-post-card">
                <h3 class="dynamic-post-title">${post.title}
                  <span class="dynamic-post-featured">Featured</span>
                </h3>
                <div class="dynamic-post-meta">
                  ${new Date(post.createdAt).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })} • by ${post.author}
                </div>
                <p class="dynamic-post-description">${post.description}</p>
                ${post.tags && post.tags.length > 0 ? `
                  <div class="dynamic-post-tags">
                    ${post.tags.map((tag: any) => `<span class="dynamic-post-tag">${tag}</span>`).join('')}
                  </div>
                ` : ''}
              </article>
            `).join('')}
          </div>
        </section>
      `;
    }

    // Add recent posts
    if (recentPosts.length > 0) {
      if (featuredPosts.length > 0) {
        html += '<hr class="border-border my-8">';
      }
      
      html += `
        <section class="pt-12 pb-6">
          <h2 class="text-2xl font-semibold tracking-wide">Latest Articles</h2>
          <div class="space-y-4">
            ${recentPosts.slice(0, 5).map((post: any) => `
              <article class="dynamic-post-card">
                <h3 class="dynamic-post-title">${post.title}</h3>
                <div class="dynamic-post-meta">
                  ${new Date(post.createdAt).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })} • by ${post.author}
                </div>
                <p class="dynamic-post-description">${post.description}</p>
                ${post.tags && post.tags.length > 0 ? `
                  <div class="dynamic-post-tags">
                    ${post.tags.map((tag: any) => `<span class="dynamic-post-tag">${tag}</span>`).join('')}
                  </div>
                ` : ''}
              </article>
            `).join('')}
          </div>
        </section>
      `;
    }

    if (html) {
      container.innerHTML = html;
      // Add HR after dynamic posts if there are static posts
      const staticSections = document.querySelector('#featured, #recent-posts');
      if (staticSections) {
        container.innerHTML += '<hr class="border-border my-8">';
      }
    }
  }

  // Load posts when page loads
  document.addEventListener('DOMContentLoaded', displayDynamicPosts);
  
  // Listen for storage changes (when posts are added/updated in admin panel)
  window.addEventListener('storage', function(e) {
    if (e.key === 'blog_posts') {
      displayDynamicPosts();
    }
  });
</script>
