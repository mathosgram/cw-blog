---
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Socials from "@/components/Socials.astro";
import LinkButton from "@/components/LinkButton.astro";
import Card from "@/components/Card.astro";
import Hr from "@/components/Hr.astro";
import getSortedPosts from "@/utils/getSortedPosts";
import IconRss from "@/assets/icons/IconRss.svg";
import IconArrowRight from "@/assets/icons/IconArrowRight.svg";
import { SITE } from "@/config";
import { SOCIALS } from "@/constants";

const posts = await getCollection("blog");

const sortedPosts = getSortedPosts(posts);
const featuredPosts = sortedPosts.filter(({ data }) => data.featured);
const recentPosts = sortedPosts.filter(({ data }) => !data.featured);
---

<Layout>
  <Header />
  <main id="main-content" data-layout="index">
    <section id="hero" class="pt-8 pb-6">
      <h1 class="my-4 inline-block text-4xl font-bold sm:my-8 sm:text-5xl">
        Welcome to Stack
      </h1>
      <a
        target="_blank"
        href="/rss.xml"
        class="inline-block"
        aria-label="rss feed"
        title="RSS Feed"
      >
        <IconRss
          width={20}
          height={20}
          class="scale-125 stroke-accent stroke-3 rtl:-rotate-90"
        />
        <span class="sr-only">RSS Feed</span>
      </a>

      <p>
        Stack is the official writing platform for the Cowrywise Ambassador Writing Group. 
        Here, our ambassadors share insights on personal finance, investment strategies, 
        and financial literacy to help Nigerians build wealth and achieve financial freedom.
      </p>
      <p class="mt-2">
        Join our community of financial writers and discover stories that inspire smart money decisions.
        Together, we're building a financially literate Nigeria, one story at a time.
      </p>
      {
        // only display if at least one social link is enabled
        SOCIALS.length > 0 && (
          <div class="mt-4 flex flex-col sm:flex-row sm:items-center">
            <div class="me-2 mb-1 whitespace-nowrap sm:mb-0">Connect with us:</div>
            <Socials />
          </div>
        )
      }
    </section>

    <Hr />

    <!-- Dynamic Posts from Admin Panel -->
    <div id="dynamic-posts-section" class="hidden">
      <section id="dynamic-featured" class="pt-12 pb-6 hidden">
        <h2 class="text-2xl font-semibold tracking-wide">Featured Posts</h2>
        <ul id="dynamic-featured-list" class="space-y-4">
          <!-- Dynamic featured posts will be loaded here -->
        </ul>
      </section>
      
      <div id="dynamic-hr" class="hidden">
        <Hr />
      </div>

      <section id="dynamic-recent" class="pt-12 pb-6 hidden">
        <h2 class="text-2xl font-semibold tracking-wide">Latest Posts</h2>
        <ul id="dynamic-recent-list" class="space-y-4">
          <!-- Dynamic recent posts will be loaded here -->
        </ul>
      </section>
    </div>

    <!-- Static Posts from Files (fallback) -->
    <div id="static-posts-section">
      {
        featuredPosts.length > 0 && (
          <>
            <section id="featured" class="pt-12 pb-6">
              <h2 class="text-2xl font-semibold tracking-wide">Featured</h2>
              <ul>
                {featuredPosts.map(data => (
                  <Card variant="h3" {...data} />
                ))}
              </ul>
            </section>
            {recentPosts.length > 0 && <Hr />}
          </>
        )
      }

      {
        recentPosts.length > 0 && (
          <section id="recent-posts" class="pt-12 pb-6">
            <h2 class="text-2xl font-semibold tracking-wide">Recent Posts</h2>
            <ul>
              {recentPosts.map(
                (data, index) =>
                  index < SITE.postPerIndex && <Card variant="h3" {...data} />
              )}
            </ul>
          </section>
        )
      }
    </div>

    <div class="my-8 text-center">
      <LinkButton href="/posts/">
        All Posts
        <IconArrowRight class="inline-block rtl:-rotate-180" />
      </LinkButton>
    </div>
  </main>
  <Footer />
</Layout>

<script>
  interface PublishedPost {
    id: number;
    title: string;
    description: string;
    author: string;
    tags: string;
    content: string;
    featured: boolean;
    publishedDate: string;
    slug: string;
  }

  class DynamicPostLoader {
    constructor() {
      this.loadDynamicPosts();
    }

    loadDynamicPosts() {
      try {
        const publishedPosts = JSON.parse(localStorage.getItem('publishedPosts') || '[]') as PublishedPost[];
        
        if (publishedPosts.length > 0) {
          this.displayDynamicPosts(publishedPosts);
          this.hideStaticPosts();
        } else {
          this.showStaticPosts();
        }
      } catch (error) {
        console.error('Error loading dynamic posts:', error);
        this.showStaticPosts();
      }
    }

    displayDynamicPosts(posts: PublishedPost[]) {
      const dynamicSection = document.getElementById('dynamic-posts-section');
      const featuredSection = document.getElementById('dynamic-featured');
      const recentSection = document.getElementById('dynamic-recent');
      const featuredList = document.getElementById('dynamic-featured-list');
      const recentList = document.getElementById('dynamic-recent-list');
      const dynamicHr = document.getElementById('dynamic-hr');

      if (!dynamicSection || !featuredSection || !recentSection || !featuredList || !recentList) {
        return;
      }

      // Sort posts by date (newest first)
      const sortedPosts = posts.sort((a, b) => new Date(b.publishedDate).getTime() - new Date(a.publishedDate).getTime());
      
      // Separate featured and regular posts
      const featuredPosts = sortedPosts.filter(post => post.featured);
      const regularPosts = sortedPosts.filter(post => !post.featured);

             // Display featured posts
       if (featuredPosts.length > 0) {
         featuredList.innerHTML = featuredPosts.map(post => this.createPostCard(post)).join('');
         featuredSection.classList.remove('hidden');
         if (regularPosts.length > 0 && dynamicHr) {
           dynamicHr.classList.remove('hidden');
         }
       }

      // Display recent posts (limit to 4)
      if (regularPosts.length > 0) {
        const recentToShow = regularPosts.slice(0, 4);
        recentList.innerHTML = recentToShow.map(post => this.createPostCard(post)).join('');
        recentSection.classList.remove('hidden');
      }

      dynamicSection.classList.remove('hidden');
    }

    createPostCard(post: PublishedPost): string {
      const publishedDate = new Date(post.publishedDate).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });

      const tags = post.tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
      const tagsHtml = tags.length > 0 ? 
        `<div class="flex flex-wrap gap-1 mt-2">
          ${tags.map(tag => `<span class="text-xs px-2 py-1 rounded-full bg-muted text-foreground/70">${tag}</span>`).join('')}
        </div>` : '';

      return `
        <li class="border border-border rounded-lg p-6 hover:shadow-md transition-shadow bg-background">
          <article>
            <header>
              <h3 class="text-xl font-semibold mb-2">
                <a href="/posts/${post.slug}/" class="hover:text-accent transition-colors" style="color: var(--color-accent);">
                  ${post.title}
                </a>
              </h3>
              <div class="flex items-center gap-4 text-sm text-foreground/60 mb-3">
                <time datetime="${post.publishedDate}">${publishedDate}</time>
                <span>by ${post.author}</span>
                ${post.featured ? '<span class="px-2 py-1 rounded text-xs" style="background-color: color-mix(in srgb, var(--color-accent) 10%, transparent); color: var(--color-accent);">Featured</span>' : ''}
              </div>
            </header>
            <p class="text-foreground/80 mb-3">${post.description}</p>
            ${tagsHtml}
          </article>
        </li>
      `;
    }

    hideStaticPosts() {
      const staticSection = document.getElementById('static-posts-section');
      if (staticSection) {
        staticSection.classList.add('hidden');
      }
    }

    showStaticPosts() {
      const staticSection = document.getElementById('static-posts-section');
      const dynamicSection = document.getElementById('dynamic-posts-section');
      
      if (staticSection) {
        staticSection.classList.remove('hidden');
      }
      if (dynamicSection) {
        dynamicSection.classList.add('hidden');
      }
    }
  }

  // Initialize dynamic post loader when page loads
  document.addEventListener('DOMContentLoaded', () => {
    new DynamicPostLoader();
  });

  // Also initialize when navigating with Astro (for view transitions)
  document.addEventListener("astro:page-load", () => {
    new DynamicPostLoader();
    
    const indexLayout = (document.querySelector("#main-content") as HTMLElement)
      ?.dataset?.layout;
    if (indexLayout) {
      sessionStorage.setItem("backUrl", "/");
    }
  });

  // Listen for storage changes (when admin posts are added)
  window.addEventListener('storage', (e) => {
    if (e.key === 'publishedPosts') {
      new DynamicPostLoader();
    }
  });

  // Custom event listener for same-tab updates
  window.addEventListener('postsUpdated', () => {
    new DynamicPostLoader();
  });
</script>
