---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import { SITE } from "@/config";
---

<Layout title={`Admin Panel - ${SITE.title}`}>
  <Header />
  <main id="main-content" class="min-h-screen bg-background">
    <div class="max-w-6xl mx-auto px-4 py-8">
      <!-- Auth Check Screen -->
      <div id="auth-check" class="flex items-center justify-center min-h-96">
        <div class="w-full max-w-md p-8 bg-muted rounded-lg shadow-lg">
          <h1 class="text-2xl font-bold text-center mb-6 text-foreground">Admin Login</h1>
          <form id="login-form" class="space-y-4">
            <div>
              <label for="password" class="block text-sm font-medium text-foreground mb-2">Password</label>
              <input 
                type="password" 
                id="password" 
                name="password"
                required
                class="w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent bg-background text-foreground"
                placeholder="Enter admin password"
              />
            </div>
            <button 
              type="submit"
              class="w-full py-2 px-4 bg-accent text-white rounded-md hover:opacity-90 transition-opacity"
            >
              Login
            </button>
          </form>
          <div id="auth-error" class="mt-4 text-red-500 text-sm text-center hidden"></div>
        </div>
      </div>

      <!-- Admin Content -->
      <div id="admin-content" class="hidden">
        <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8 gap-4">
          <h1 class="text-3xl font-bold text-foreground">Admin Panel</h1>
          <button 
            id="logout-btn"
            class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors text-sm"
          >
            Logout
          </button>
        </div>

        <!-- Navigation -->
        <div class="mb-8">
          <nav class="flex flex-wrap gap-2 bg-muted rounded-lg p-2">
            <button 
              id="posts-tab" 
              class="admin-tab active flex-1 min-w-0 px-3 py-2 text-sm font-medium rounded-md transition-colors text-center"
            >
              üìù Posts
            </button>
            <button 
              id="create-tab" 
              class="admin-tab flex-1 min-w-0 px-3 py-2 text-sm font-medium rounded-md transition-colors text-center"
            >
              ‚úçÔ∏è Create
            </button>
            <button 
              id="media-tab" 
              class="admin-tab flex-1 min-w-0 px-3 py-2 text-sm font-medium rounded-md transition-colors text-center"
            >
              üìÅ Media
            </button>
            <button 
              id="analytics-tab" 
              class="admin-tab flex-1 min-w-0 px-3 py-2 text-sm font-medium rounded-md transition-colors text-center"
            >
              üìä Stats
            </button>
          </nav>
        </div>

        <!-- Posts Tab -->
        <div id="posts-content" class="tab-content">
          <div class="bg-muted rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-4 text-foreground">All Posts</h2>
            <div id="posts-list" class="space-y-4">
              <!-- Posts will be loaded here -->
            </div>
          </div>
        </div>

        <!-- Create Tab -->
        <div id="create-content" class="tab-content hidden">
          <div class="bg-muted rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-6 text-foreground">Create New Post</h2>
            <form id="create-post-form" class="space-y-6">
              <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                  <label for="title" class="block text-sm font-medium text-foreground mb-2">Title</label>
                  <div class="flex gap-2">
                    <input 
                      type="text" 
                      id="title" 
                      name="title"
                      required
                      class="flex-1 px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent bg-background text-foreground"
                    />
                    <button 
                      type="button"
                      id="rewrite-title-btn"
                      class="px-3 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors text-sm"
                      title="AI Rewrite"
                    >
                      ‚ú®
                    </button>
                  </div>
                </div>
                <div>
                  <label for="author" class="block text-sm font-medium text-foreground mb-2">Author</label>
                  <input 
                    type="text" 
                    id="author" 
                    name="author"
                    required
                    class="w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent bg-background text-foreground"
                  />
                </div>
              </div>

              <div>
                <label for="description" class="block text-sm font-medium text-foreground mb-2">Description</label>
                <div class="flex gap-2">
                  <textarea 
                    id="description" 
                    name="description"
                    required
                    rows="3"
                    class="flex-1 px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent bg-background text-foreground"
                  ></textarea>
                  <button 
                    type="button"
                    id="rewrite-description-btn"
                    class="px-3 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors text-sm"
                    title="AI Rewrite"
                  >
                    ‚ú®
                  </button>
                </div>
              </div>

              <div>
                <label for="content" class="block text-sm font-medium text-foreground mb-2">Content (Markdown)</label>
                <div class="border border-border rounded-md overflow-hidden">
                  <!-- Editor Toolbar -->
                  <div class="bg-muted border-b border-border p-2 flex flex-wrap gap-2">
                    <button type="button" class="editor-btn" data-action="bold" title="Bold">
                      <strong>B</strong>
                    </button>
                    <button type="button" class="editor-btn" data-action="italic" title="Italic">
                      <em>I</em>
                    </button>
                    <button type="button" class="editor-btn" data-action="heading" title="Heading">
                      H1
                    </button>
                    <button type="button" class="editor-btn" data-action="link" title="Link">
                      üîó
                    </button>
                    <button type="button" class="editor-btn" data-action="list" title="List">
                      üìù
                    </button>
                    <button type="button" class="editor-btn" data-action="quote" title="Quote">
                      üí¨
                    </button>
                    <div class="border-l border-border mx-2"></div>
                    <button type="button" id="upload-image-btn" class="editor-btn" title="Upload Image">
                      üñºÔ∏è
                    </button>
                    <button type="button" id="upload-video-btn" class="editor-btn" title="Upload Video">
                      üé•
                    </button>
                    <div class="border-l border-border mx-2"></div>
                    <button type="button" id="ai-rewrite-content-btn" class="editor-btn bg-purple-500 text-white" title="AI Rewrite Selection">
                      ‚ú® AI
                    </button>
                    <button type="button" id="ai-improve-btn" class="editor-btn bg-blue-500 text-white" title="AI Improve Content">
                      üöÄ Improve
                    </button>
                  </div>
                  
                  <textarea 
                    id="content" 
                    name="content"
                    required
                    rows="15"
                    class="w-full px-3 py-2 focus:outline-none focus:ring-2 focus:ring-accent bg-background text-foreground font-mono text-sm resize-y"
                    placeholder="Write your post content in Markdown..."
                  ></textarea>
                </div>
              </div>

              <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                  <label for="tags" class="block text-sm font-medium text-foreground mb-2">Tags (comma separated)</label>
                  <input 
                    type="text" 
                    id="tags" 
                    name="tags"
                    class="w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent bg-background text-foreground"
                    placeholder="finance, investing, money"
                  />
                </div>
                <div class="flex items-end gap-4">
                  <label class="flex items-center space-x-2">
                    <input type="checkbox" id="featured" name="featured" class="rounded">
                    <span class="text-sm text-foreground">Featured Post</span>
                  </label>
                  <label class="flex items-center space-x-2">
                    <input type="checkbox" id="published" name="published" class="rounded" checked>
                    <span class="text-sm text-foreground">Publish Now</span>
                  </label>
                </div>
              </div>

              <div class="flex flex-col sm:flex-row gap-4">
                <button 
                  type="submit"
                  class="flex-1 py-2 px-4 bg-accent text-white rounded-md hover:opacity-90 transition-opacity"
                >
                  Create Post
                </button>
                <button 
                  type="button"
                  id="save-draft-btn"
                  class="flex-1 py-2 px-4 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
                >
                  Save as Draft
                </button>
              </div>
            </form>
          </div>
        </div>

        <!-- Media Tab -->
        <div id="media-content" class="tab-content hidden">
          <div class="bg-muted rounded-lg p-6">
            <div class="flex justify-between items-center mb-6">
              <h2 class="text-xl font-semibold text-foreground">Media Library</h2>
              <button 
                id="upload-media-btn"
                class="px-4 py-2 bg-accent text-white rounded-md hover:opacity-90 transition-opacity"
              >
                Upload Files
              </button>
            </div>
            
            <div id="media-grid" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4">
              <!-- Media files will be loaded here -->
            </div>
          </div>
        </div>

        <!-- Analytics Tab -->
        <div id="analytics-content" class="tab-content hidden">
          <div class="bg-muted rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-6 text-foreground">Analytics</h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
              <div class="bg-background p-4 rounded-lg border border-border">
                <h3 class="text-sm font-medium text-foreground/60">Total Posts</h3>
                <p id="total-posts" class="text-2xl font-bold text-foreground">0</p>
              </div>
              <div class="bg-background p-4 rounded-lg border border-border">
                <h3 class="text-sm font-medium text-foreground/60">Published</h3>
                <p id="published-posts" class="text-2xl font-bold text-accent">0</p>
              </div>
              <div class="bg-background p-4 rounded-lg border border-border">
                <h3 class="text-sm font-medium text-foreground/60">Drafts</h3>
                <p id="draft-posts" class="text-2xl font-bold text-orange-500">0</p>
              </div>
              <div class="bg-background p-4 rounded-lg border border-border">
                <h3 class="text-sm font-medium text-foreground/60">Featured</h3>
                <p id="featured-posts" class="text-2xl font-bold text-green-500">0</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Media Upload Modal -->
      <div id="media-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-background border border-border rounded-lg p-6 max-w-2xl w-full mx-4">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-foreground">Upload Media</h3>
            <button id="close-media-modal" class="text-foreground/60 hover:text-foreground">‚úï</button>
          </div>
          
          <div id="upload-area" class="border-2 border-dashed border-border rounded-lg p-8 text-center mb-4 hover:border-accent transition-colors">
            <div class="text-4xl mb-2">üìÅ</div>
            <p class="text-foreground/60 mb-2">Drag and drop files here or click to browse</p>
            <p class="text-sm text-foreground/40">Supports images (JPEG, PNG, WebP, GIF) and videos (MP4, WebM) up to 10MB</p>
            <input type="file" id="file-input" multiple accept="image/*,video/*" class="hidden">
          </div>
          
          <div id="upload-progress" class="hidden">
            <div class="w-full bg-muted rounded-full h-2 mb-2">
              <div id="progress-bar" class="bg-accent h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
            </div>
            <p class="text-sm text-foreground/60 text-center">Uploading...</p>
          </div>
        </div>
      </div>

      <!-- AI Processing Modal -->
      <div id="ai-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-background border border-border rounded-lg p-6 max-w-md w-full mx-4">
          <div class="text-center">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-accent mx-auto mb-4"></div>
            <h3 class="text-lg font-semibold text-foreground mb-2">AI Processing</h3>
            <p class="text-foreground/60">Enhancing your content...</p>
          </div>
        </div>
      </div>
    </div>
  </main>
  <Footer />
</Layout>

<style>
  .admin-tab.active {
    background-color: var(--color-accent);
    color: white;
  }
  .admin-tab:not(.active) {
    background-color: transparent;
    color: var(--color-foreground);
  }
  .admin-tab:not(.active):hover {
    background-color: color-mix(in srgb, var(--color-accent) 10%, transparent);
  }
  .editor-btn {
    padding: 0.5rem;
    border: 1px solid var(--color-border);
    border-radius: 0.25rem;
    background: var(--color-background);
    color: var(--color-foreground);
    font-size: 0.875rem;
    transition: all 0.2s;
  }
  .editor-btn:hover {
    background: var(--color-accent);
    color: white;
  }
  .media-item {
    position: relative;
    aspect-ratio: 1;
    border-radius: 0.5rem;
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.2s;
  }
  .media-item:hover {
    transform: scale(1.02);
  }
  .media-item img,
  .media-item video {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  .media-item .overlay {
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.2s;
  }
  .media-item:hover .overlay {
    opacity: 1;
  }
  .media-actions {
    display: flex;
    gap: 0.5rem;
  }
  .media-actions button {
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    border: none;
    cursor: pointer;
    transition: all 0.2s;
  }
  .copy-btn {
    background: var(--color-accent);
    color: white;
  }
  .delete-btn {
    background: #ef4444;
    color: white;
  }
</style>

<script>
  // Add Fireworks API key - you'll need to set this
  const FIREWORKS_API_KEY = 'your_fireworks_api_key_here'; // Replace with actual key

  interface BlogPost {
    id: string;
    title: string;
    description: string;
    content: string;
    author: string;
    tags: string[];
    featured: boolean;
    published: boolean;
    createdAt: string;
    updatedAt: string;
  }

  interface MediaFile {
    id: string;
    name: string;
    url: string;
    type: 'image' | 'video';
    size: number;
    uploadedAt: string;
  }

  class AdvancedAdminPanel {
    private isAuthenticated = false;

    constructor() {
      this.init();
    }

    init() {
      // Check if already authenticated
      if (localStorage.getItem('admin_authenticated') === 'true') {
        this.showAdminPanel();
      }

      this.setupEventListeners();
    }

    setupEventListeners() {
      // Auth form
      const loginForm = document.getElementById('login-form') as HTMLFormElement;
      loginForm?.addEventListener('submit', (e) => this.handleLogin(e));

      // Logout
      const logoutBtn = document.getElementById('logout-btn');
      logoutBtn?.addEventListener('click', () => this.logout());

      // Tabs
      document.getElementById('posts-tab')?.addEventListener('click', () => this.showTab('posts'));
      document.getElementById('create-tab')?.addEventListener('click', () => this.showTab('create'));
      document.getElementById('media-tab')?.addEventListener('click', () => this.showTab('media'));
      document.getElementById('analytics-tab')?.addEventListener('click', () => this.showTab('analytics'));

      // Forms
      const createForm = document.getElementById('create-post-form') as HTMLFormElement;
      createForm?.addEventListener('submit', (e) => this.createPost(e));

      const saveDraftBtn = document.getElementById('save-draft-btn');
      saveDraftBtn?.addEventListener('click', () => this.saveDraft());

      // Editor buttons
      this.setupEditorButtons();

      // AI rewrite buttons
      document.getElementById('rewrite-title-btn')?.addEventListener('click', () => this.aiRewriteField('title'));
      document.getElementById('rewrite-description-btn')?.addEventListener('click', () => this.aiRewriteField('description'));
      document.getElementById('ai-rewrite-content-btn')?.addEventListener('click', () => this.aiRewriteSelection());
      document.getElementById('ai-improve-btn')?.addEventListener('click', () => this.aiImproveContent());

      // Media upload
      this.setupMediaUpload();
    }

    setupEditorButtons() {
      const editorBtns = document.querySelectorAll('.editor-btn');
      const contentTextarea = document.getElementById('content') as HTMLTextAreaElement;

      editorBtns.forEach(btn => {
        btn.addEventListener('click', () => {
          const action = btn.getAttribute('data-action');
          if (action) {
            this.insertMarkdown(action, contentTextarea);
          }
        });
      });
    }

    insertMarkdown(action: string, textarea: HTMLTextAreaElement) {
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const selectedText = textarea.value.substring(start, end);
      let replacement = '';

      switch (action) {
        case 'bold':
          replacement = `**${selectedText || 'bold text'}**`;
          break;
        case 'italic':
          replacement = `*${selectedText || 'italic text'}*`;
          break;
        case 'heading':
          replacement = `## ${selectedText || 'Heading'}`;
          break;
        case 'link':
          replacement = `[${selectedText || 'link text'}](url)`;
          break;
        case 'list':
          replacement = `\n- ${selectedText || 'list item'}\n- ${selectedText || 'list item'}`;
          break;
        case 'quote':
          replacement = `> ${selectedText || 'quote text'}`;
          break;
      }

      textarea.value = textarea.value.substring(0, start) + replacement + textarea.value.substring(end);
      textarea.focus();
      textarea.setSelectionRange(start + replacement.length, start + replacement.length);
    }

    setupMediaUpload() {
      const uploadBtn = document.getElementById('upload-media-btn');
      const modal = document.getElementById('media-modal');
      const closeBtn = document.getElementById('close-media-modal');
      const uploadArea = document.getElementById('upload-area');
      const fileInput = document.getElementById('file-input') as HTMLInputElement;

      uploadBtn?.addEventListener('click', () => {
        modal?.classList.remove('hidden');
        modal?.classList.add('flex');
      });

      closeBtn?.addEventListener('click', () => {
        modal?.classList.add('hidden');
        modal?.classList.remove('flex');
      });

      uploadArea?.addEventListener('click', () => fileInput?.click());

      // Drag and drop
      uploadArea?.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('border-accent');
      });

      uploadArea?.addEventListener('dragleave', () => {
        uploadArea.classList.remove('border-accent');
      });

      uploadArea?.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('border-accent');
        const files = e.dataTransfer?.files;
        if (files) {
          this.uploadFiles(Array.from(files));
        }
      });

      fileInput?.addEventListener('change', (e) => {
        const files = (e.target as HTMLInputElement).files;
        if (files) {
          this.uploadFiles(Array.from(files));
        }
      });

      // Media upload buttons in editor
      document.getElementById('upload-image-btn')?.addEventListener('click', () => {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.onchange = (e) => {
          const files = (e.target as HTMLInputElement).files;
          if (files) {
            this.uploadFiles(Array.from(files), true);
          }
        };
        input.click();
      });

      document.getElementById('upload-video-btn')?.addEventListener('click', () => {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'video/*';
        input.onchange = (e) => {
          const files = (e.target as HTMLInputElement).files;
          if (files) {
            this.uploadFiles(Array.from(files), true);
          }
        };
        input.click();
      });
    }

    async uploadFiles(files: File[], insertInEditor = false) {
      const progressContainer = document.getElementById('upload-progress');
      const progressBar = document.getElementById('progress-bar');
      
      progressContainer?.classList.remove('hidden');
      
      try {
        const uploadedFiles: MediaFile[] = [];
        
        for (let i = 0; i < files.length; i++) {
          const file = files[i];
          
          // Validate file
          if (file.size > 10 * 1024 * 1024) {
            this.showNotification(`File ${file.name} is too large (max 10MB)`, 'error');
            continue;
          }

          // Create file URL (simulate upload)
          const fileUrl = URL.createObjectURL(file);
          const mediaFile: MediaFile = {
            id: Date.now().toString() + Math.random(),
            name: file.name,
            url: fileUrl,
            type: file.type.startsWith('image/') ? 'image' : 'video',
            size: file.size,
            uploadedAt: new Date().toISOString()
          };

          uploadedFiles.push(mediaFile);

          // Update progress
          const progress = ((i + 1) / files.length) * 100;
          if (progressBar) {
            progressBar.style.width = `${progress}%`;
          }

          // Insert into editor if requested
          if (insertInEditor) {
            this.insertMediaInEditor(mediaFile);
          }
        }

        // Save to localStorage
        this.saveMediaFiles(uploadedFiles);
        
        // Close modal and refresh media
        document.getElementById('media-modal')?.classList.add('hidden');
        this.loadMedia();
        this.showNotification('Files uploaded successfully!', 'success');
      } catch (error) {
        console.error('Upload error:', error);
        this.showNotification('Upload failed. Please try again.', 'error');
      } finally {
        progressContainer?.classList.add('hidden');
        if (progressBar) {
          progressBar.style.width = '0%';
        }
      }
    }

    insertMediaInEditor(media: MediaFile) {
      const textarea = document.getElementById('content') as HTMLTextAreaElement;
      const markdown = media.type === 'image' 
        ? `![${media.name}](${media.url})` 
        : `<video src="${media.url}" controls></video>`;
      
      const cursorPos = textarea.selectionStart;
      textarea.value = textarea.value.substring(0, cursorPos) + '\n\n' + markdown + '\n\n' + textarea.value.substring(cursorPos);
      textarea.focus();
    }

    saveMediaFiles(newFiles: MediaFile[]) {
      const existingFiles = this.getMediaFiles();
      const allFiles = [...existingFiles, ...newFiles];
      localStorage.setItem('media_files', JSON.stringify(allFiles));
    }

    getMediaFiles(): MediaFile[] {
      const files = localStorage.getItem('media_files');
      return files ? JSON.parse(files) : [];
    }

    async aiRewriteField(fieldId: string) {
      const field = document.getElementById(fieldId) as HTMLInputElement | HTMLTextAreaElement;
      if (!field || !field.value.trim()) {
        this.showNotification('Please enter some text first', 'error');
        return;
      }

      this.showAIModal();
      
      try {
        const rewrittenText = await this.callFireworksAPI(field.value, 'rewrite');
        field.value = rewrittenText;
        this.showNotification('Content rewritten successfully!', 'success');
      } catch (error) {
        console.error('AI rewrite error:', error);
        this.showNotification('AI rewrite failed. Please try again.', 'error');
      } finally {
        this.hideAIModal();
      }
    }

    async aiRewriteSelection() {
      const textarea = document.getElementById('content') as HTMLTextAreaElement;
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const selectedText = textarea.value.substring(start, end);

      if (!selectedText.trim()) {
        this.showNotification('Please select some text first', 'error');
        return;
      }

      this.showAIModal();
      
      try {
        const rewrittenText = await this.callFireworksAPI(selectedText, 'rewrite');
        textarea.value = textarea.value.substring(0, start) + rewrittenText + textarea.value.substring(end);
        this.showNotification('Selection rewritten successfully!', 'success');
      } catch (error) {
        console.error('AI rewrite error:', error);
        this.showNotification('AI rewrite failed. Please try again.', 'error');
      } finally {
        this.hideAIModal();
      }
    }

    async aiImproveContent() {
      const textarea = document.getElementById('content') as HTMLTextAreaElement;
      if (!textarea.value.trim()) {
        this.showNotification('Please enter some content first', 'error');
        return;
      }

      this.showAIModal();
      
      try {
        const improvedContent = await this.callFireworksAPI(textarea.value, 'improve');
        textarea.value = improvedContent;
        this.showNotification('Content improved successfully!', 'success');
      } catch (error) {
        console.error('AI improve error:', error);
        this.showNotification('AI improvement failed. Please try again.', 'error');
      } finally {
        this.hideAIModal();
      }
    }

    async callFireworksAPI(text: string, action: 'rewrite' | 'improve'): Promise<string> {
      // For demo purposes, we'll simulate the API call
      // In production, you'll need to implement the actual Fireworks API integration
      
      await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API delay
      
      const prompts = {
        rewrite: `Please rewrite the following text to make it more engaging and clear while maintaining the original meaning: "${text}"`,
        improve: `Please improve the following content by making it more professional, engaging, and well-structured for a financial blog: "${text}"`
      };

      // This is a mock response - replace with actual Fireworks API call
      if (action === 'rewrite') {
        return text.split(' ').map(word => 
          Math.random() > 0.7 ? this.getSynonym(word) : word
        ).join(' ');
      } else {
        return `## Enhanced Content\n\n${text}\n\n**Key Takeaways:**\n- Professional insight added\n- Structure improved\n- Engagement enhanced`;
      }
    }

    getSynonym(word: string): string {
      const synonyms: { [key: string]: string[] } = {
        'good': ['excellent', 'outstanding', 'remarkable'],
        'bad': ['poor', 'inadequate', 'subpar'],
        'big': ['large', 'substantial', 'significant'],
        'small': ['compact', 'minimal', 'modest'],
        'money': ['funds', 'capital', 'finances'],
        'save': ['preserve', 'conserve', 'accumulate'],
        'invest': ['allocate', 'deploy', 'commit']
      };
      
      const wordLower = word.toLowerCase();
      const options = synonyms[wordLower];
      return options ? options[Math.floor(Math.random() * options.length)] : word;
    }

    showAIModal() {
      const modal = document.getElementById('ai-modal');
      modal?.classList.remove('hidden');
      modal?.classList.add('flex');
    }

    hideAIModal() {
      const modal = document.getElementById('ai-modal');
      modal?.classList.add('hidden');
      modal?.classList.remove('flex');
    }

    handleLogin(e: Event) {
      e.preventDefault();
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      const password = formData.get('password') as string;

      if (password === 'admin123' || password === 'cowrywise2024') {
        localStorage.setItem('admin_authenticated', 'true');
        this.showAdminPanel();
      } else {
        this.showAuthError('Invalid password');
      }
    }

    showAuthError(message: string) {
      const errorDiv = document.getElementById('auth-error');
      if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
        setTimeout(() => errorDiv.classList.add('hidden'), 3000);
      }
    }

    showAdminPanel() {
      this.isAuthenticated = true;
      document.getElementById('auth-check')?.classList.add('hidden');
      document.getElementById('admin-content')?.classList.remove('hidden');
      this.loadPosts();
      this.loadMedia();
      this.updateAnalytics();
    }

    logout() {
      localStorage.removeItem('admin_authenticated');
      this.isAuthenticated = false;
      document.getElementById('admin-content')?.classList.add('hidden');
      document.getElementById('auth-check')?.classList.remove('hidden');
    }

    showTab(tabName: string) {
      // Hide all tabs
      document.querySelectorAll('.tab-content').forEach(tab => tab.classList.add('hidden'));
      document.querySelectorAll('.admin-tab').forEach(tab => tab.classList.remove('active'));

      // Show selected tab
      document.getElementById(`${tabName}-content`)?.classList.remove('hidden');
      document.getElementById(`${tabName}-tab`)?.classList.add('active');

      if (tabName === 'posts') {
        this.loadPosts();
      } else if (tabName === 'media') {
        this.loadMedia();
      } else if (tabName === 'analytics') {
        this.updateAnalytics();
      }
    }

    loadMedia() {
      const mediaFiles = this.getMediaFiles();
      const container = document.getElementById('media-grid');
      if (!container) return;

      if (mediaFiles.length === 0) {
        container.innerHTML = `
          <div class="col-span-full text-center py-8 text-foreground/60">
            <p>No media files yet. Upload your first file!</p>
          </div>
        `;
        return;
      }

      container.innerHTML = mediaFiles.map(media => `
        <div class="media-item" data-id="${media.id}">
          ${media.type === 'image' 
            ? `<img src="${media.url}" alt="${media.name}" loading="lazy">` 
            : `<video src="${media.url}" muted></video>`
          }
          <div class="overlay">
            <div class="media-actions">
              <button class="copy-btn" onclick="adminPanel.copyMediaUrl('${media.url}')">Copy URL</button>
              <button class="delete-btn" onclick="adminPanel.deleteMedia('${media.id}')">Delete</button>
            </div>
          </div>
        </div>
      `).join('');
    }

    copyMediaUrl(url: string) {
      navigator.clipboard.writeText(url).then(() => {
        this.showNotification('URL copied to clipboard!', 'success');
      });
    }

    deleteMedia(id: string) {
      if (!confirm('Are you sure you want to delete this media file?')) return;
      
      const mediaFiles = this.getMediaFiles();
      const filteredFiles = mediaFiles.filter(file => file.id !== id);
      localStorage.setItem('media_files', JSON.stringify(filteredFiles));
      this.loadMedia();
      this.showNotification('Media file deleted', 'success');
    }

    createPost(e: Event) {
      e.preventDefault();
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);

      const post: BlogPost = {
        id: Date.now().toString(),
        title: formData.get('title') as string,
        description: formData.get('description') as string,
        content: formData.get('content') as string,
        author: formData.get('author') as string,
        tags: (formData.get('tags') as string).split(',').map(tag => tag.trim()).filter(tag => tag),
        featured: formData.get('featured') === 'on',
        published: formData.get('published') === 'on',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      this.savePost(post);
      form.reset();
      this.showNotification('Post created successfully!', 'success');
      this.loadPosts();
      this.updateAnalytics();
      
      // Trigger storage event to update frontend
      window.dispatchEvent(new StorageEvent('storage', {
        key: 'blog_posts',
        newValue: localStorage.getItem('blog_posts')
      }));
    }

    saveDraft() {
      const form = document.getElementById('create-post-form') as HTMLFormElement;
      const published = form.querySelector('#published') as HTMLInputElement;
      const wasChecked = published.checked;
      published.checked = false;
      
      const event = new Event('submit');
      form.dispatchEvent(event);
      
      published.checked = wasChecked;
    }

    savePost(post: BlogPost) {
      const posts = this.getPosts();
      posts.push(post);
      localStorage.setItem('blog_posts', JSON.stringify(posts));
    }

    getPosts(): BlogPost[] {
      const posts = localStorage.getItem('blog_posts');
      return posts ? JSON.parse(posts) : [];
    }

    loadPosts() {
      const posts = this.getPosts();
      this.displayPosts(posts);
    }

    displayPosts(posts: BlogPost[]) {
      const container = document.getElementById('posts-list');
      if (!container) return;

      if (posts.length === 0) {
        container.innerHTML = `
          <div class="text-center py-8 text-foreground/60">
            <p>No posts yet. Create your first post!</p>
          </div>
        `;
        return;
      }

      container.innerHTML = posts.map(post => `
        <div class="border border-border rounded-lg p-4 bg-background">
          <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-4">
            <div class="flex-1 min-w-0">
              <h3 class="font-semibold text-accent break-words">${post.title}</h3>
              <p class="text-sm text-foreground/60 mt-1 break-words">${post.description}</p>
              <div class="flex flex-wrap items-center gap-2 mt-2 text-xs text-foreground/60">
                <span class="px-2 py-1 bg-muted rounded">${post.published ? 'Published' : 'Draft'}</span>
                <span>${post.author}</span>
                ${post.featured ? '<span class="px-2 py-1 bg-accent/20 text-accent rounded">Featured</span>' : ''}
              </div>
            </div>
            <div class="flex gap-2 shrink-0">
              <button onclick="adminPanel.editPost('${post.id}')" class="px-3 py-1 text-sm bg-accent/20 text-accent rounded hover:bg-accent/30">Edit</button>
              <button onclick="adminPanel.deletePost('${post.id}')" class="px-3 py-1 text-sm bg-red-500/20 text-red-500 rounded hover:bg-red-500/30">Delete</button>
            </div>
          </div>
        </div>
      `).join('');
    }

    editPost(id: string) {
      const posts = this.getPosts();
      const post = posts.find(p => p.id === id);
      if (post) {
        const form = document.getElementById('create-post-form') as HTMLFormElement;
        (form.querySelector('#title') as HTMLInputElement).value = post.title;
        (form.querySelector('#description') as HTMLTextAreaElement).value = post.description;
        (form.querySelector('#content') as HTMLTextAreaElement).value = post.content;
        (form.querySelector('#author') as HTMLInputElement).value = post.author;
        (form.querySelector('#tags') as HTMLInputElement).value = post.tags.join(', ');
        (form.querySelector('#featured') as HTMLInputElement).checked = post.featured;
        (form.querySelector('#published') as HTMLInputElement).checked = post.published;

        this.showTab('create');
        this.deletePost(id);
      }
    }

    deletePost(id: string) {
      const posts = this.getPosts();
      const filteredPosts = posts.filter(p => p.id !== id);
      localStorage.setItem('blog_posts', JSON.stringify(filteredPosts));
      this.loadPosts();
      this.updateAnalytics();
      this.showNotification('Post deleted', 'success');
      
      // Trigger storage event to update frontend
      window.dispatchEvent(new StorageEvent('storage', {
        key: 'blog_posts',
        newValue: localStorage.getItem('blog_posts')
      }));
    }

    updateAnalytics() {
      const posts = this.getPosts();
      const totalPosts = posts.length;
      const publishedPosts = posts.filter(p => p.published).length;
      const draftPosts = posts.filter(p => !p.published).length;
      const featuredPosts = posts.filter(p => p.featured && p.published).length;

      document.getElementById('total-posts')!.textContent = totalPosts.toString();
      document.getElementById('published-posts')!.textContent = publishedPosts.toString();
      document.getElementById('draft-posts')!.textContent = draftPosts.toString();
      document.getElementById('featured-posts')!.textContent = featuredPosts.toString();
    }

    showNotification(message: string, type: 'success' | 'error' = 'success') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 px-4 py-2 rounded-md text-white z-50 ${
        type === 'success' ? 'bg-green-500' : 'bg-red-500'
      }`;
      notification.textContent = message;
      document.body.appendChild(notification);

      setTimeout(() => {
        notification.remove();
      }, 3000);
    }
  }

  // Initialize admin panel
  const adminPanel = new AdvancedAdminPanel();
  (window as any).adminPanel = adminPanel;
</script>