---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import { SITE } from "@/config";
---

<Layout title={`Admin Panel - ${SITE.title}`}>
  <Header />
  <main id="main-content" class="min-h-screen bg-background">
    <div class="max-w-6xl mx-auto px-4 py-8">
      <!-- Auth Check Screen -->
      <div id="auth-check" class="flex items-center justify-center min-h-96">
        <div class="w-full max-w-md p-8 bg-muted rounded-lg shadow-lg">
          <h1 class="text-2xl font-bold text-center mb-6 text-foreground">Admin Login</h1>
          <form id="login-form" class="space-y-4">
            <div>
              <label for="password" class="block text-sm font-medium text-foreground mb-2">Password</label>
              <input 
                type="password" 
                id="password" 
                name="password"
                required
                class="w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent bg-background text-foreground"
                placeholder="Enter admin password"
              />
            </div>
            <button 
              type="submit"
              class="w-full py-2 px-4 bg-accent text-white rounded-md hover:opacity-90 transition-opacity"
            >
              Login
            </button>
          </form>
          <div id="auth-error" class="mt-4 text-red-500 text-sm text-center hidden"></div>
        </div>
      </div>

      <!-- Admin Content -->
      <div id="admin-content" class="hidden">
        <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8 gap-4">
          <h1 class="text-3xl font-bold text-foreground">Admin Panel</h1>
          <button 
            id="logout-btn"
            class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors text-sm"
          >
            Logout
          </button>
        </div>

        <!-- Navigation -->
        <div class="mb-8">
          <nav class="flex flex-wrap gap-2 bg-muted rounded-lg p-2">
            <button 
              id="posts-tab" 
              class="admin-tab active flex-1 min-w-0 px-3 py-2 text-sm font-medium rounded-md transition-colors text-center"
            >
              üìù Posts
            </button>
            <button 
              id="create-tab" 
              class="admin-tab flex-1 min-w-0 px-3 py-2 text-sm font-medium rounded-md transition-colors text-center"
            >
              ‚úçÔ∏è Create
            </button>
            <button 
              id="analytics-tab" 
              class="admin-tab flex-1 min-w-0 px-3 py-2 text-sm font-medium rounded-md transition-colors text-center"
            >
              üìä Stats
            </button>
          </nav>
        </div>

        <!-- Posts Tab -->
        <div id="posts-content" class="tab-content">
          <div class="bg-muted rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-4 text-foreground">All Posts</h2>
            <div id="posts-list" class="space-y-4">
              <!-- Posts will be loaded here -->
            </div>
          </div>
        </div>

        <!-- Create Tab -->
        <div id="create-content" class="tab-content hidden">
          <div class="bg-muted rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-6 text-foreground">Create New Post</h2>
            <form id="create-post-form" class="space-y-6">
              <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                  <label for="title" class="block text-sm font-medium text-foreground mb-2">Title</label>
                  <input 
                    type="text" 
                    id="title" 
                    name="title"
                    required
                    class="w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent bg-background text-foreground"
                  />
                </div>
                <div>
                  <label for="author" class="block text-sm font-medium text-foreground mb-2">Author</label>
                  <input 
                    type="text" 
                    id="author" 
                    name="author"
                    required
                    class="w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent bg-background text-foreground"
                  />
                </div>
              </div>

              <div>
                <label for="description" class="block text-sm font-medium text-foreground mb-2">Description</label>
                <textarea 
                  id="description" 
                  name="description"
                  required
                  rows="3"
                  class="w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent bg-background text-foreground"
                ></textarea>
              </div>

              <div>
                <label for="content" class="block text-sm font-medium text-foreground mb-2">Content (Markdown)</label>
                <textarea 
                  id="content" 
                  name="content"
                  required
                  rows="10"
                  class="w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent bg-background text-foreground font-mono text-sm"
                ></textarea>
              </div>

              <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                  <label for="tags" class="block text-sm font-medium text-foreground mb-2">Tags (comma separated)</label>
                  <input 
                    type="text" 
                    id="tags" 
                    name="tags"
                    class="w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent bg-background text-foreground"
                    placeholder="finance, investing, money"
                  />
                </div>
                <div class="flex items-end gap-4">
                  <label class="flex items-center space-x-2">
                    <input type="checkbox" id="featured" name="featured" class="rounded">
                    <span class="text-sm text-foreground">Featured Post</span>
                  </label>
                  <label class="flex items-center space-x-2">
                    <input type="checkbox" id="published" name="published" class="rounded" checked>
                    <span class="text-sm text-foreground">Publish Now</span>
                  </label>
                </div>
              </div>

              <div class="flex flex-col sm:flex-row gap-4">
                <button 
                  type="submit"
                  class="flex-1 py-2 px-4 bg-accent text-white rounded-md hover:opacity-90 transition-opacity"
                >
                  Create Post
                </button>
                <button 
                  type="button"
                  id="save-draft-btn"
                  class="flex-1 py-2 px-4 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
                >
                  Save as Draft
                </button>
              </div>
            </form>
          </div>
        </div>

        <!-- Analytics Tab -->
        <div id="analytics-content" class="tab-content hidden">
          <div class="bg-muted rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-6 text-foreground">Analytics</h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
              <div class="bg-background p-4 rounded-lg border border-border">
                <h3 class="text-sm font-medium text-foreground/60">Total Posts</h3>
                <p id="total-posts" class="text-2xl font-bold text-foreground">0</p>
              </div>
              <div class="bg-background p-4 rounded-lg border border-border">
                <h3 class="text-sm font-medium text-foreground/60">Published</h3>
                <p id="published-posts" class="text-2xl font-bold text-accent">0</p>
              </div>
              <div class="bg-background p-4 rounded-lg border border-border">
                <h3 class="text-sm font-medium text-foreground/60">Drafts</h3>
                <p id="draft-posts" class="text-2xl font-bold text-orange-500">0</p>
              </div>
              <div class="bg-background p-4 rounded-lg border border-border">
                <h3 class="text-sm font-medium text-foreground/60">Featured</h3>
                <p id="featured-posts" class="text-2xl font-bold text-green-500">0</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
  <Footer />
</Layout>

<style>
  .admin-tab.active {
    background-color: var(--color-accent);
    color: white;
  }
  .admin-tab:not(.active) {
    background-color: transparent;
    color: var(--color-foreground);
  }
  .admin-tab:not(.active):hover {
    background-color: color-mix(in srgb, var(--color-accent) 10%, transparent);
  }
</style>

<script>
  interface BlogPost {
    id: string;
    title: string;
    description: string;
    content: string;
    author: string;
    tags: string[];
    featured: boolean;
    published: boolean;
    createdAt: string;
    updatedAt: string;
  }

  class SimpleAdminPanel {
    private isAuthenticated = false;

    constructor() {
      this.init();
    }

    init() {
      // Check if already authenticated
      if (localStorage.getItem('admin_authenticated') === 'true') {
        this.showAdminPanel();
      }

      // Auth form
      const loginForm = document.getElementById('login-form') as HTMLFormElement;
      loginForm?.addEventListener('submit', (e) => this.handleLogin(e));

      // Logout
      const logoutBtn = document.getElementById('logout-btn');
      logoutBtn?.addEventListener('click', () => this.logout());

      // Tabs
      document.getElementById('posts-tab')?.addEventListener('click', () => this.showTab('posts'));
      document.getElementById('create-tab')?.addEventListener('click', () => this.showTab('create'));
      document.getElementById('analytics-tab')?.addEventListener('click', () => this.showTab('analytics'));

      // Forms
      const createForm = document.getElementById('create-post-form') as HTMLFormElement;
      createForm?.addEventListener('submit', (e) => this.createPost(e));

      const saveDraftBtn = document.getElementById('save-draft-btn');
      saveDraftBtn?.addEventListener('click', () => this.saveDraft());

      if (this.isAuthenticated) {
        this.loadPosts();
        this.updateAnalytics();
      }
    }

    handleLogin(e: Event) {
      e.preventDefault();
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      const password = formData.get('password') as string;

      // Simple password check (in production, this should be server-side)
      if (password === 'admin123' || password === 'cowrywise2024') {
        localStorage.setItem('admin_authenticated', 'true');
        this.showAdminPanel();
      } else {
        this.showAuthError('Invalid password');
      }
    }

    showAuthError(message: string) {
      const errorDiv = document.getElementById('auth-error');
      if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
        setTimeout(() => errorDiv.classList.add('hidden'), 3000);
      }
    }

    showAdminPanel() {
      this.isAuthenticated = true;
      document.getElementById('auth-check')?.classList.add('hidden');
      document.getElementById('admin-content')?.classList.remove('hidden');
      this.loadPosts();
      this.updateAnalytics();
    }

    logout() {
      localStorage.removeItem('admin_authenticated');
      localStorage.removeItem('blog_posts');
      this.isAuthenticated = false;
      document.getElementById('admin-content')?.classList.add('hidden');
      document.getElementById('auth-check')?.classList.remove('hidden');
    }

    showTab(tabName: string) {
      // Hide all tabs
      document.querySelectorAll('.tab-content').forEach(tab => tab.classList.add('hidden'));
      document.querySelectorAll('.admin-tab').forEach(tab => tab.classList.remove('active'));

      // Show selected tab
      document.getElementById(`${tabName}-content`)?.classList.remove('hidden');
      document.getElementById(`${tabName}-tab`)?.classList.add('active');

      if (tabName === 'posts') {
        this.loadPosts();
      } else if (tabName === 'analytics') {
        this.updateAnalytics();
      }
    }

    createPost(e: Event) {
      e.preventDefault();
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);

      const post: BlogPost = {
        id: Date.now().toString(),
        title: formData.get('title') as string,
        description: formData.get('description') as string,
        content: formData.get('content') as string,
        author: formData.get('author') as string,
        tags: (formData.get('tags') as string).split(',').map(tag => tag.trim()).filter(tag => tag),
        featured: formData.get('featured') === 'on',
        published: formData.get('published') === 'on',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      this.savePost(post);
      form.reset();
      this.showNotification('Post created successfully!', 'success');
      this.loadPosts();
      this.updateAnalytics();
    }

    saveDraft() {
      const form = document.getElementById('create-post-form') as HTMLFormElement;
      const published = form.querySelector('#published') as HTMLInputElement;
      const wasChecked = published.checked;
      published.checked = false;
      
      const event = new Event('submit');
      form.dispatchEvent(event);
      
      published.checked = wasChecked;
    }

    savePost(post: BlogPost) {
      const posts = this.getPosts();
      posts.push(post);
      localStorage.setItem('blog_posts', JSON.stringify(posts));
    }

    getPosts(): BlogPost[] {
      const posts = localStorage.getItem('blog_posts');
      return posts ? JSON.parse(posts) : [];
    }

    loadPosts() {
      const posts = this.getPosts();
      this.displayPosts(posts);
    }

    displayPosts(posts: BlogPost[]) {
      const container = document.getElementById('posts-list');
      if (!container) return;

      if (posts.length === 0) {
        container.innerHTML = `
          <div class="text-center py-8 text-foreground/60">
            <p>No posts yet. Create your first post!</p>
          </div>
        `;
        return;
      }

      container.innerHTML = posts.map(post => `
        <div class="border border-border rounded-lg p-4 bg-background">
          <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-4">
            <div class="flex-1 min-w-0">
              <h3 class="font-semibold text-accent break-words">${post.title}</h3>
              <p class="text-sm text-foreground/60 mt-1 break-words">${post.description}</p>
              <div class="flex flex-wrap items-center gap-2 mt-2 text-xs text-foreground/60">
                <span class="px-2 py-1 bg-muted rounded">${post.published ? 'Published' : 'Draft'}</span>
                <span>${post.author}</span>
                ${post.featured ? '<span class="px-2 py-1 bg-accent/20 text-accent rounded">Featured</span>' : ''}
              </div>
            </div>
            <div class="flex gap-2 shrink-0">
              <button onclick="adminPanel.editPost('${post.id}')" class="px-3 py-1 text-sm bg-accent/20 text-accent rounded hover:bg-accent/30">Edit</button>
              <button onclick="adminPanel.deletePost('${post.id}')" class="px-3 py-1 text-sm bg-red-500/20 text-red-500 rounded hover:bg-red-500/30">Delete</button>
            </div>
          </div>
        </div>
      `).join('');
    }

    editPost(id: string) {
      const posts = this.getPosts();
      const post = posts.find(p => p.id === id);
      if (post) {
        // Fill form with post data
        const form = document.getElementById('create-post-form') as HTMLFormElement;
        (form.querySelector('#title') as HTMLInputElement).value = post.title;
        (form.querySelector('#description') as HTMLTextAreaElement).value = post.description;
        (form.querySelector('#content') as HTMLTextAreaElement).value = post.content;
        (form.querySelector('#author') as HTMLInputElement).value = post.author;
        (form.querySelector('#tags') as HTMLInputElement).value = post.tags.join(', ');
        (form.querySelector('#featured') as HTMLInputElement).checked = post.featured;
        (form.querySelector('#published') as HTMLInputElement).checked = post.published;

        // Switch to create tab
        this.showTab('create');

        // Delete old post (will be replaced when form is submitted)
        this.deletePost(id);
      }
    }

    deletePost(id: string) {
      const posts = this.getPosts();
      const filteredPosts = posts.filter(p => p.id !== id);
      localStorage.setItem('blog_posts', JSON.stringify(filteredPosts));
      this.loadPosts();
      this.updateAnalytics();
      this.showNotification('Post deleted', 'success');
    }

    updateAnalytics() {
      const posts = this.getPosts();
      const totalPosts = posts.length;
      const publishedPosts = posts.filter(p => p.published).length;
      const draftPosts = posts.filter(p => !p.published).length;
      const featuredPosts = posts.filter(p => p.featured && p.published).length;

      document.getElementById('total-posts')!.textContent = totalPosts.toString();
      document.getElementById('published-posts')!.textContent = publishedPosts.toString();
      document.getElementById('draft-posts')!.textContent = draftPosts.toString();
      document.getElementById('featured-posts')!.textContent = featuredPosts.toString();
    }

    showNotification(message: string, type: 'success' | 'error' = 'success') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 px-4 py-2 rounded-md text-white z-50 ${
        type === 'success' ? 'bg-green-500' : 'bg-red-500'
      }`;
      notification.textContent = message;
      document.body.appendChild(notification);

      setTimeout(() => {
        notification.remove();
      }, 3000);
    }
  }

  // Initialize admin panel
  const adminPanel = new SimpleAdminPanel();
  (window as any).adminPanel = adminPanel;
</script>