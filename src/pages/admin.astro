---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import { SITE } from "@/config";
---

<Layout title={`Admin Panel - ${SITE.title}`}>
  <Header />
  <main id="main-content" class="min-h-screen">
    <!-- Clerk Authentication Check -->
    <div id="auth-check" class="min-h-screen flex items-center justify-center">
      <div class="text-center">
        <div class="animate-spin rounded-full h-32 w-32 border-b-2" style="border-color: var(--color-accent);"></div>
        <p class="mt-4 text-foreground/60">Loading...</p>
      </div>
    </div>

    <!-- Admin Panel Content (Hidden by default) -->
    <div id="admin-content" class="hidden">
      <section class="pt-8 pb-6">
        <div class="rounded-lg p-8 mb-8" style="background: linear-gradient(to right, color-mix(in srgb, var(--color-accent) 10%, transparent), color-mix(in srgb, var(--color-accent) 5%, transparent));">
          <div class="flex justify-between items-start">
            <div>
              <h1 class="text-4xl font-bold mb-4" style="color: var(--color-accent);">Admin Panel</h1>
              <p class="text-foreground/80">
                Manage and create content for the Cowrywise Ambassador Writing Group
              </p>
            </div>
            <div class="flex items-center space-x-4">
              <div id="user-info" class="text-right">
                <!-- User info will be populated here -->
              </div>
              <button
                id="logout-btn"
                class="px-4 py-2 text-sm border border-border rounded-md text-foreground hover:bg-muted transition-colors"
              >
                Sign Out
              </button>
            </div>
          </div>
        </div>

        <!-- Admin Navigation -->
        <div class="mb-8">
          <nav class="flex flex-col sm:flex-row space-y-1 sm:space-y-0 sm:space-x-1 bg-muted rounded-lg p-1">
            <button 
              id="posts-tab" 
              class="admin-tab active flex-1 px-3 py-2 text-sm font-medium rounded-md transition-colors text-center"
            >
              📝 Posts
            </button>
            <button 
              id="create-tab" 
              class="admin-tab flex-1 px-3 py-2 text-sm font-medium rounded-md transition-colors text-center"
            >
              ✍️ Create New
            </button>
            <button 
              id="media-tab" 
              class="admin-tab flex-1 px-3 py-2 text-sm font-medium rounded-md transition-colors text-center"
            >
              📁 Media Library
            </button>
            <button 
              id="analytics-tab" 
              class="admin-tab flex-1 px-3 py-2 text-sm font-medium rounded-md transition-colors text-center"
            >
              📊 Analytics
            </button>
          </nav>
        </div>

        <!-- Posts Management Tab -->
        <div id="posts-content" class="admin-content">
          <div class="bg-background border border-border rounded-lg shadow-sm">
            <div class="px-6 py-4 border-b border-border">
              <h2 class="text-xl font-semibold">Published Posts</h2>
              <p class="text-foreground/60 mt-1">Manage your published content</p>
            </div>
            <div class="p-6">
              <div class="space-y-4" id="posts-list">
                <!-- Posts will be loaded here -->
                <div class="text-center py-8 text-foreground/60">
                  <p>Loading posts...</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Create New Post Tab -->
        <div id="create-content" class="admin-content hidden">
          <div class="bg-background border border-border rounded-lg shadow-sm">
            <div class="px-6 py-4 border-b border-border">
              <h2 class="text-xl font-semibold">Create New Post</h2>
              <p class="text-foreground/60 mt-1">Write and publish a new blog post</p>
            </div>
            <div class="p-6">
              <form id="create-post-form" class="space-y-6">
                <div>
                  <label for="title" class="block text-sm font-medium text-foreground mb-2">
                    Title
                  </label>
                  <input
                    type="text"
                    id="title"
                    name="title"
                    class="w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent/50"
                    placeholder="Enter post title..."
                    required
                  />
                </div>

                <div>
                  <label for="description" class="block text-sm font-medium text-foreground mb-2">
                    Description
                  </label>
                  <textarea
                    id="description"
                    name="description"
                    rows="3"
                    class="w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent/50"
                    placeholder="Brief description of the post..."
                    required
                  ></textarea>
                </div>

                <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  <div>
                    <label for="tags" class="block text-sm font-medium text-foreground mb-2">
                      Tags (comma-separated)
                    </label>
                    <input
                      type="text"
                      id="tags"
                      name="tags"
                      class="w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent/50 text-sm"
                      placeholder="investing, savings, finance..."
                    />
                  </div>
                  <div>
                    <label for="cover-image" class="block text-sm font-medium text-foreground mb-2">
                      Cover Image
                    </label>
                    <input
                      type="file"
                      id="cover-image"
                      accept="image/*"
                      class="w-full px-3 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-accent/50 text-sm file:border-0 file:bg-muted file:text-foreground file:px-4 file:py-1 file:rounded file:mr-4"
                    />
                  </div>
                </div>

                <div class="flex flex-col sm:flex-row sm:items-center space-y-3 sm:space-y-0 sm:space-x-6">
                  <label class="flex items-center space-x-2 cursor-pointer">
                    <input
                      type="checkbox"
                      id="featured"
                      name="featured"
                      class="w-4 h-4 border-border rounded cursor-pointer"
                      style="accent-color: var(--color-accent);"
                    />
                    <span class="text-sm text-foreground select-none">Feature this post</span>
                  </label>
                  <label class="flex items-center space-x-2 cursor-pointer">
                    <input
                      type="checkbox"
                      id="published"
                      name="published"
                      class="w-4 h-4 border-border rounded cursor-pointer"
                      style="accent-color: var(--color-accent);"
                      checked
                    />
                    <span class="text-sm text-foreground select-none">Publish immediately</span>
                  </label>
                </div>

                <div>
                  <label for="content" class="block text-sm font-medium text-foreground mb-2">
                    Content (Markdown)
                  </label>
                  <div class="border border-border rounded-md">
                    <div class="flex border-b border-border">
                      <button type="button" id="add-image-btn" class="px-3 py-2 text-sm border-r border-border hover:bg-muted transition-colors">
                        📷 Add Image
                      </button>
                      <button type="button" id="add-video-btn" class="px-3 py-2 text-sm border-r border-border hover:bg-muted transition-colors">
                        🎥 Add Video
                      </button>
                      <button type="button" id="preview-btn" class="px-3 py-2 text-sm hover:bg-muted transition-colors">
                        👁️ Preview
                      </button>
                    </div>
                    <textarea
                      id="content"
                      name="content"
                      rows="20"
                      class="w-full px-3 py-2 border-0 focus:outline-none focus:ring-2 focus:ring-accent/50 font-mono text-sm resize-none rounded-b-md"
                      placeholder="Write your post content in Markdown format..."
                      required
                    ></textarea>
                  </div>
                </div>

                <div class="flex flex-col sm:flex-row justify-end space-y-3 sm:space-y-0 sm:space-x-4">
                  <button
                    type="button"
                    id="save-draft"
                    class="w-full sm:w-auto px-4 py-2 border border-border rounded-md text-foreground hover:bg-muted transition-colors"
                  >
                    💾 Save as Draft
                  </button>
                  <button
                    type="submit"
                    class="w-full sm:w-auto px-4 py-2 text-white rounded-md transition-colors"
                    style="background-color: var(--color-accent);"
                    onmouseover="this.style.backgroundColor = 'var(--color-accent)'; this.style.opacity = '0.9';"
                    onmouseout="this.style.backgroundColor = 'var(--color-accent)'; this.style.opacity = '1';"
                  >
                    🚀 Publish Post
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>

        <!-- Media Library Tab -->
        <div id="media-content" class="admin-content hidden">
          <div class="bg-background border border-border rounded-lg shadow-sm">
            <div class="px-6 py-4 border-b border-border">
              <div class="flex justify-between items-center">
                <div>
                  <h2 class="text-xl font-semibold">Media Library</h2>
                  <p class="text-foreground/60 mt-1">Upload and manage images and videos</p>
                </div>
                <div class="flex space-x-2">
                  <input
                    type="file"
                    id="media-upload"
                    accept="image/*,video/*"
                    multiple
                    class="hidden"
                  />
                  <button
                    id="upload-media-btn"
                    class="px-4 py-2 text-white rounded-md transition-colors"
                    style="background-color: var(--color-accent);"
                    onmouseover="this.style.opacity='0.9';"
                    onmouseout="this.style.opacity='1';"
                  >
                    Upload Media
                  </button>
                </div>
              </div>
            </div>
            <div class="p-4 sm:p-6">
              <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3 sm:gap-4" id="media-grid">
                <!-- Media files will be loaded here -->
                <div class="col-span-full text-center py-8 text-foreground/60">
                  <p>Loading media files...</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Analytics Tab -->
        <div id="analytics-content" class="admin-content hidden">
          <div class="bg-background border border-border rounded-lg shadow-sm">
            <div class="px-6 py-4 border-b border-border">
              <h2 class="text-xl font-semibold">Content Analytics</h2>
              <p class="text-foreground/60 mt-1">Track your content performance</p>
            </div>
            <div class="p-4 sm:p-6">
              <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8">
                <div class="rounded-lg p-6 text-center" style="background-color: color-mix(in srgb, var(--color-accent) 5%, transparent);">
                  <div class="text-2xl font-bold" style="color: var(--color-accent);" id="total-posts">0</div>
                  <div class="text-sm text-foreground/60">Total Posts</div>
                </div>
                <div class="rounded-lg p-6 text-center" style="background-color: color-mix(in srgb, var(--color-accent) 5%, transparent);">
                  <div class="text-2xl font-bold" style="color: var(--color-accent);" id="featured-posts">0</div>
                  <div class="text-sm text-foreground/60">Featured Posts</div>
                </div>
                <div class="rounded-lg p-6 text-center" style="background-color: color-mix(in srgb, var(--color-accent) 5%, transparent);">
                  <div class="text-2xl font-bold" style="color: var(--color-accent);" id="draft-posts">0</div>
                  <div class="text-sm text-foreground/60">Draft Posts</div>
                </div>
                <div class="rounded-lg p-6 text-center" style="background-color: color-mix(in srgb, var(--color-accent) 5%, transparent);">
                  <div class="text-2xl font-bold" style="color: var(--color-accent);" id="total-media">0</div>
                  <div class="text-sm text-foreground/60">Media Files</div>
                </div>
              </div>
              
              <div class="text-center py-8 text-foreground/60">
                <p>Detailed analytics coming soon...</p>
                <p class="text-sm mt-2">Track views, engagement, and more</p>
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>

    <!-- Media Upload Modal -->
    <div id="media-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
      <div class="bg-background border border-border rounded-lg p-6 max-w-2xl w-full mx-4">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold">Upload Media</h3>
          <button id="close-modal" class="text-foreground/60 hover:text-foreground">✕</button>
        </div>
        
        <div id="upload-area" class="border-2 border-dashed border-border rounded-lg p-8 text-center mb-4">
          <div class="text-4xl mb-2">📁</div>
          <p class="text-foreground/60 mb-2">Drag and drop files here or click to browse</p>
          <p class="text-sm text-foreground/40">Supports images (JPEG, PNG, WebP, GIF) and videos (MP4, WebM) up to 10MB</p>
        </div>
        
        <div id="upload-progress" class="hidden">
          <div class="w-full bg-muted rounded-full h-2 mb-2">
            <div id="progress-bar" class="h-2 rounded-full transition-all duration-300" style="background-color: var(--color-accent); width: 0%"></div>
          </div>
          <p class="text-sm text-foreground/60 text-center">Uploading...</p>
        </div>
        
        <div class="flex justify-end space-x-2">
          <button id="cancel-upload" class="px-4 py-2 border border-border rounded-md text-foreground hover:bg-muted transition-colors">
            Cancel
          </button>
        </div>
      </div>
    </div>
  </main>
  <Footer />
</Layout>

<script>
  import { Clerk } from '@clerk/clerk-js';

  // Initialize Clerk
  const clerkPublishableKey = import.meta.env.PUBLIC_CLERK_PUBLISHABLE_KEY;
  const clerk = new Clerk(clerkPublishableKey);
  await clerk.load();

  interface BlogPost {
    id: string;
    title: string;
    description: string;
    content: string;
    author: string;
    tags: string[];
    featured: boolean;
    published: boolean;
    slug: string;
    coverImage?: string;
    createdAt: string;
    updatedAt: string;
    publishedAt?: string;
  }

  interface MediaFile {
    id: string;
    fileName: string;
    url: string;
    thumbnailUrl?: string;
    fileType: 'image' | 'video';
    size: number;
    uploadedAt: string;
  }

  class AdminPanel {


    constructor() {
      this.init();
    }

    async init() {
      // Check if user is signed in
      if (clerk.user) {
        await this.initializePanel();
      } else {
        // Redirect to sign in
        await clerk.redirectToSignIn();
      }
    }

    async initializePanel() {
      // Session will be handled automatically via cookies

      // Show admin content
      document.getElementById('auth-check')?.classList.add('hidden');
      document.getElementById('admin-content')?.classList.remove('hidden');

      // Display user info
      this.displayUserInfo();

      // Initialize components
      this.initTabs();
      this.initForms();
      this.initMediaUpload();
      
      // Load data
      this.loadPosts();
      this.loadMedia();
      this.updateAnalytics();

      // Setup logout
      document.getElementById('logout-btn')?.addEventListener('click', async () => {
        await clerk.signOut();
        window.location.reload();
      });
    }

    displayUserInfo() {
      const userInfo = document.getElementById('user-info');
      if (userInfo && clerk.user) {
        userInfo.innerHTML = `
          <div class="text-sm">
            <div class="font-medium">${clerk.user.firstName} ${clerk.user.lastName}</div>
            <div class="text-foreground/60">${clerk.user.emailAddresses[0]?.emailAddress}</div>
          </div>
        `;
      }
    }

    initTabs() {
      const tabs = document.querySelectorAll('.admin-tab');
      const contents = document.querySelectorAll('.admin-content');

      tabs.forEach(tab => {
        tab.addEventListener('click', () => {
          tabs.forEach(t => t.classList.remove('active'));
          contents.forEach(c => c.classList.add('hidden'));

          tab.classList.add('active');
          const tabId = tab.id.replace('-tab', '-content');
          document.getElementById(tabId)?.classList.remove('hidden');
        });
      });
    }

    initForms() {
      const createForm = document.getElementById('create-post-form') as HTMLFormElement;
      const saveDraftBtn = document.getElementById('save-draft');

      createForm?.addEventListener('submit', (e) => {
        e.preventDefault();
        this.publishPost();
      });

      saveDraftBtn?.addEventListener('click', () => {
        this.saveDraft();
      });

      // Media insertion buttons
      document.getElementById('add-image-btn')?.addEventListener('click', () => {
        this.showMediaSelector('image');
      });

      document.getElementById('add-video-btn')?.addEventListener('click', () => {
        this.showMediaSelector('video');
      });
    }

    initMediaUpload() {
      const uploadBtn = document.getElementById('upload-media-btn');
      const mediaInput = document.getElementById('media-upload') as HTMLInputElement;
      const modal = document.getElementById('media-modal');
      const closeModal = document.getElementById('close-modal');
      const cancelUpload = document.getElementById('cancel-upload');
      const uploadArea = document.getElementById('upload-area');

      uploadBtn?.addEventListener('click', () => {
        modal?.classList.remove('hidden');
        modal?.classList.add('flex');
      });

      closeModal?.addEventListener('click', () => {
        modal?.classList.add('hidden');
        modal?.classList.remove('flex');
      });

      cancelUpload?.addEventListener('click', () => {
        modal?.classList.add('hidden');
        modal?.classList.remove('flex');
      });

      uploadArea?.addEventListener('click', () => {
        mediaInput?.click();
      });

      uploadArea?.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('border-accent');
      });

      uploadArea?.addEventListener('dragleave', () => {
        uploadArea.classList.remove('border-accent');
      });

      uploadArea?.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('border-accent');
        const files = e.dataTransfer?.files;
        if (files) {
          this.uploadFiles(Array.from(files));
        }
      });

      mediaInput?.addEventListener('change', (e) => {
        const files = (e.target as HTMLInputElement).files;
        if (files) {
          this.uploadFiles(Array.from(files));
        }
      });
    }

    async uploadFiles(files: File[]) {
      const progressContainer = document.getElementById('upload-progress');
      const progressBar = document.getElementById('progress-bar');
      
      progressContainer?.classList.remove('hidden');
      
      try {
        for (let i = 0; i < files.length; i++) {
          const file = files[i];
          const formData = new FormData();
          formData.append('file', file);

          const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData,
            credentials: 'include'
          });

          if (response.ok) {
            const progress = ((i + 1) / files.length) * 100;
            if (progressBar) {
              progressBar.style.width = `${progress}%`;
            }
          }
        }

        // Close modal and refresh media
        document.getElementById('media-modal')?.classList.add('hidden');
        this.loadMedia();
        this.showNotification('Files uploaded successfully!', 'success');
      } catch (error) {
        console.error('Upload error:', error);
        this.showNotification('Upload failed. Please try again.', 'error');
      } finally {
        progressContainer?.classList.add('hidden');
        if (progressBar) {
          progressBar.style.width = '0%';
        }
      }
    }

    async loadPosts() {
      try {
        const response = await fetch('/api/posts?published=false', {
          credentials: 'include'
        });
        
        if (response.ok) {
          const data = await response.json();
          this.displayPosts(data.data.posts);
        }
      } catch (error) {
        console.error('Error loading posts:', error);
      }
    }

    displayPosts(posts: BlogPost[]) {
      const postsContainer = document.getElementById('posts-list');
      if (!postsContainer) return;

      if (posts.length === 0) {
        postsContainer.innerHTML = `
          <div class="text-center py-8 text-foreground/60">
            <p>No posts yet. Create your first post!</p>
          </div>
        `;
        return;
      }

      postsContainer.innerHTML = posts.map(post => `
        <div class="border border-border rounded-lg p-4 hover:bg-muted/50 transition-colors">
          <div class="flex justify-between items-start">
            <div class="flex-1">
              <h3 class="font-semibold" style="color: var(--color-accent);">${post.title}</h3>
              <p class="text-sm text-foreground/60 mt-1">${post.description}</p>
              <div class="flex items-center space-x-4 mt-2 text-xs text-foreground/60">
                <span>${post.published ? 'Published' : 'Draft'}: ${new Date(post.published ? post.publishedAt! : post.updatedAt).toLocaleDateString()}</span>
                <span>Author: ${post.author}</span>
                ${post.featured ? '<span class="px-2 py-1 rounded text-xs" style="background-color: color-mix(in srgb, var(--color-accent) 10%, transparent); color: var(--color-accent);">Featured</span>' : ''}
              </div>
            </div>
            <div class="flex space-x-2 ml-4">
              <button onclick="adminPanel.editPost('${post.id}')" class="text-sm transition-colors" style="color: var(--color-accent);" onmouseover="this.style.opacity='0.8';" onmouseout="this.style.opacity='1';">Edit</button>
              <button onclick="adminPanel.deletePost('${post.id}')" class="text-red-500 hover:text-red-600 text-sm">Delete</button>
            </div>
          </div>
        </div>
      `).join('');
    }

    async loadMedia() {
      try {
        const response = await fetch('/api/upload', {
          credentials: 'include'
        });
        
        if (response.ok) {
          const data = await response.json();
          this.displayMedia(data.data || []);
        }
      } catch (error) {
        console.error('Error loading media:', error);
      }
    }

    displayMedia(mediaFiles: MediaFile[]) {
      const mediaGrid = document.getElementById('media-grid');
      if (!mediaGrid) return;

      if (mediaFiles.length === 0) {
        mediaGrid.innerHTML = `
          <div class="col-span-full text-center py-8 text-foreground/60">
            <p>No media files yet. Upload your first file!</p>
          </div>
        `;
        return;
      }

      mediaGrid.innerHTML = mediaFiles.map(media => `
        <div class="group relative aspect-square border border-border rounded-lg overflow-hidden hover:ring-2 hover:ring-accent/50 transition-all">
          ${media.fileType === 'image' 
            ? `<img src="${media.thumbnailUrl || media.url}" alt="${media.fileName}" class="w-full h-full object-cover" />`
            : `<video src="${media.url}" class="w-full h-full object-cover" muted></video>`
          }
          <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition-all flex items-center justify-center">
            <div class="opacity-0 group-hover:opacity-100 transition-opacity space-x-2">
              <button onclick="adminPanel.insertMedia('${media.url}')" class="px-2 py-1 bg-accent text-white text-xs rounded">Insert</button>
              <button onclick="adminPanel.deleteMedia('${media.id}')" class="px-2 py-1 bg-red-500 text-white text-xs rounded">Delete</button>
            </div>
          </div>
          <div class="absolute bottom-0 left-0 right-0 bg-black bg-opacity-75 text-white text-xs p-2 truncate">
            ${media.fileName}
          </div>
        </div>
      `).join('');
    }

    async publishPost() {
      const form = document.getElementById('create-post-form') as HTMLFormElement;
      if (!form) return;

      const formData = new FormData(form);
      const coverImageFile = formData.get('cover-image') as File;
      
      let coverImageUrl = '';
      if (coverImageFile && coverImageFile.size > 0) {
        // Upload cover image first
        const uploadData = new FormData();
        uploadData.append('file', coverImageFile);
        
        const uploadResponse = await fetch('/api/upload', {
          method: 'POST',
          body: uploadData,
          credentials: 'include'
        });
        
        if (uploadResponse.ok) {
          const uploadResult = await uploadResponse.json();
          coverImageUrl = uploadResult.data.url;
        }
      }

      const postData = {
        title: formData.get('title'),
        description: formData.get('description'),
        content: formData.get('content'),
        tags: (formData.get('tags') as string).split(',').map(tag => tag.trim()).filter(tag => tag),
        featured: formData.get('featured') === 'on',
        published: formData.get('published') === 'on',
        coverImage: coverImageUrl
      };

      try {
        const response = await fetch('/api/posts', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(postData),
          credentials: 'include'
        });

        if (response.ok) {

          this.showNotification('Post published successfully!', 'success');
          form.reset();
          this.loadPosts();
          this.updateAnalytics();
        } else {
          const error = await response.json();
          console.error('API Error:', error);
          this.showNotification(error.error || 'Failed to publish post', 'error');
        }
      } catch (error) {
        console.error('Error publishing post:', error);
        this.showNotification('Network error: Failed to publish post', 'error');
      }
    }

    async saveDraft() {
      const publishedCheckbox = document.getElementById('published') as HTMLInputElement;
      const wasPublished = publishedCheckbox.checked;
      
      publishedCheckbox.checked = false;
      await this.publishPost();
      publishedCheckbox.checked = wasPublished;
    }

    async updateAnalytics() {
      try {
        const [allPostsResponse, draftsResponse, mediaResponse] = await Promise.all([
          fetch('/api/posts?published=true', {
            credentials: 'include'
          }),
          fetch('/api/posts?published=false', {
            credentials: 'include'
          }),
          fetch('/api/upload', {
            credentials: 'include'
          })
        ]);

        if (allPostsResponse.ok && draftsResponse.ok && mediaResponse.ok) {
          const allPostsData = await allPostsResponse.json();
          const draftsData = await draftsResponse.json();
          const mediaData = await mediaResponse.json();
          
          const publishedPosts = allPostsData.data?.posts || [];
          const draftPosts = draftsData.data?.posts || [];
          const totalMedia = Array.isArray(mediaData.data) ? mediaData.data : [];

          const totalPosts = publishedPosts.length;
          const featuredPosts = publishedPosts.filter((p: any) => p.featured).length;
          const totalDrafts = draftPosts.length;
          const mediaCount = totalMedia.length;

          document.getElementById('total-posts')!.textContent = totalPosts.toString();
          document.getElementById('featured-posts')!.textContent = featuredPosts.toString();
          document.getElementById('draft-posts')!.textContent = totalDrafts.toString();
          document.getElementById('total-media')!.textContent = mediaCount.toString();
        }
      } catch (error) {
        console.error('Error updating analytics:', error);
        // Set default values on error
        document.getElementById('total-posts')!.textContent = '0';
        document.getElementById('featured-posts')!.textContent = '0';
        document.getElementById('draft-posts')!.textContent = '0';
        document.getElementById('total-media')!.textContent = '0';
      }
    }

    insertMedia(url: string) {
      const contentTextarea = document.getElementById('content') as HTMLTextAreaElement;
      if (contentTextarea) {
        const isImage = url.includes('.jpg') || url.includes('.png') || url.includes('.webp') || url.includes('.gif');
        const markdown = isImage ? `![Image](${url})` : `<video src="${url}" controls></video>`;
        
        const cursorPos = contentTextarea.selectionStart;
        const textBefore = contentTextarea.value.substring(0, cursorPos);
        const textAfter = contentTextarea.value.substring(cursorPos);
        
        contentTextarea.value = textBefore + '\n\n' + markdown + '\n\n' + textAfter;
        contentTextarea.focus();
        contentTextarea.setSelectionRange(cursorPos + markdown.length + 4, cursorPos + markdown.length + 4);
      }
    }

    showMediaSelector(_type: 'image' | 'video') {
      // Switch to media tab
      document.getElementById('media-tab')?.click();
    }

    async editPost(id: string) {
      // Implementation for editing posts
      console.log('Edit post:', id);
    }

    async deletePost(id: string) {
      if (!confirm('Are you sure you want to delete this post?')) return;

      try {
        const response = await fetch('/api/posts', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ id }),
          credentials: 'include'
        });

        if (response.ok) {
          this.showNotification('Post deleted successfully!', 'success');
          this.loadPosts();
          this.updateAnalytics();
        }
      } catch (error) {
        console.error('Error deleting post:', error);
        this.showNotification('Failed to delete post', 'error');
      }
    }

    async deleteMedia(id: string) {
      if (!confirm('Are you sure you want to delete this media file?')) return;

      try {
        const response = await fetch('/api/upload', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ id }),
          credentials: 'include'
        });

        if (response.ok) {
          this.showNotification('Media deleted successfully!', 'success');
          this.loadMedia();
          this.updateAnalytics();
        }
      } catch (error) {
        console.error('Error deleting media:', error);
        this.showNotification('Failed to delete media', 'error');
      }
    }

    showNotification(message: string, type: 'success' | 'error' = 'success') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-md text-white transition-opacity duration-300 ${
        type === 'success' ? 'bg-green-500' : 'bg-red-500'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 3000);
    }
  }

  // Initialize admin panel
  const adminPanel = new AdminPanel();

  // Make adminPanel available
  (window as any).adminPanel = adminPanel;
</script>

<style>
  .admin-tab.active {
    background-color: var(--color-accent);
    color: white;
  }

  .admin-tab:not(.active) {
    color: color-mix(in srgb, var(--color-foreground) 70%, transparent);
  }
  
  .admin-tab:not(.active):hover {
    color: var(--color-foreground);
    background-color: color-mix(in srgb, var(--color-background) 50%, transparent);
  }

  #upload-area.border-accent {
    border-color: var(--color-accent);
  }
</style>